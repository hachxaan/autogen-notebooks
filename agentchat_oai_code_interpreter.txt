# Auto Generated Agent Chat: GPTAssistant with Code Interpreter
The latest released Assistants API by OpenAI allows users to build AI assistants within their own applications. The Assistants API currently supports three types of tools: Code Interpreter, Retrieval, and Function calling. In this notebook, we demonstrate how to enable `GPTAssistantAgent` to use code interpreter. 

## Requirements

AutoGen requires `Python>=3.8`. To run this notebook example, please install:
```bash
pip install pyautogen
```

## Set your API Endpoint

The [`config_list_from_json`](https://microsoft.github.io/autogen/docs/reference/oai/openai_utils#config_list_from_json) function loads a list of configurations from an environment variable or a json file.


```python
import autogen

config_list = autogen.config_list_from_json(
    "OAI_CONFIG_LIST",
    file_location=".",
    filter_dict={
        "model": ["gpt-3.5-turbo", "gpt-35-turbo", "gpt-4", "gpt4", "gpt-4-32k", "gpt-4-turbo"],
    },
)
```

It first looks for environment variable "OAI_CONFIG_LIST" which needs to be a valid json string. If that variable is not found, it then looks for a json file named "OAI_CONFIG_LIST". It filters the configs by models (you can filter by other keys as well).

The config list looks like the following:
```python
config_list = [
    {
        "model": "gpt-4",
        "api_key": "<your OpenAI API key>",
    },  # OpenAI API endpoint for gpt-4
]
```

Currently Azure OpenAi does not support assistant api. You can set the value of config_list in any way you prefer. Please refer to this [notebook](https://github.com/microsoft/autogen/blob/main/notebook/oai_openai_utils.ipynb) for full code examples of the different methods.

## Perform Tasks Using Code Interpreter

We demonstrate task solving using `GPTAssistantAgent` with code interpreter. Pass `code_interpreter` in `tools` parameter to enable `GPTAssistantAgent` with code interpreter. It will write code and automatically execute it in a sandbox. The agent will receive the results from the sandbox environment and act accordingly.

### Example 1: Math Problem Solving
In this example, we demonstrate how to use code interpreter to solve math problems.



```python
from autogen.agentchat.contrib.gpt_assistant_agent import GPTAssistantAgent
from autogen.agentchat import AssistantAgent, UserProxyAgent

# Initiate an agent equipped with code interpreter
gpt_assistant = GPTAssistantAgent(
    name="Coder Assistant",
    llm_config={
        "tools": [
            {
                "type": "code_interpreter"
            }
        ],
        "config_list": config_list,
    },
    instructions="You are an expert at solving math questions. Write code and run it to solve math problems. Reply TERMINATE when the task is solved and there is no problem.",
)

user_proxy = UserProxyAgent(
    name="user_proxy",
    is_termination_msg=lambda msg: "TERMINATE" in msg["content"],
    code_execution_config={
        "work_dir": "coding",
        "use_docker": False,  # set to True or image name like "python:3" to use docker
    },
    human_input_mode="NEVER"
)

# When all is set, initate the chat.
user_proxy.initiate_chat(gpt_assistant, message="If $725x + 727y = 1500$ and $729x+ 731y = 1508$, what is the value of $x - y$ ?")

```

    WARNING:autogen.agentchat.contrib.gpt_assistant_agent:assistant_id was None, creating a new assistant


    [33muser_proxy[0m (to Coder Assistant):
    
    If $725x + 727y = 1500$ and $729x+ 731y = 1508$, what is the value of $x - y$ ?
    
    --------------------------------------------------------------------------------
    [33mCoder Assistant[0m (to user_proxy):
    
    The value of $x - y$ is $-48$. 
    
    TERMINATE
    
    
    --------------------------------------------------------------------------------


### Example 2: Plotting with Code Interpreter

Code Interpreter can outputs files, such as generating image diagrams. In this example, we demonstrate how to draw figures and download it.


```python
gpt_assistant = GPTAssistantAgent(
    name="Coder Assistant",
    llm_config={
        "tools": [
            {
                "type": "code_interpreter"
            }
        ],
        "config_list": config_list,
    },
    instructions="You are an expert at writing python code to solve problems. Reply TERMINATE when the task is solved and there is no problem.",
)

user_proxy.initiate_chat(gpt_assistant, message="Draw a line chart to show the population trend in US. Show how you solved it with code.", clear_history=True)
```

    WARNING:autogen.agentchat.contrib.gpt_assistant_agent:assistant_id was None, creating a new assistant


    [33muser_proxy[0m (to Coder Assistant):
    
    Draw a line chart to show the population trend in US. Show how you solved it with code.
    
    --------------------------------------------------------------------------------
    [33mCoder Assistant[0m (to user_proxy):
    
    To draw a line chart showing the population trend in the US, we need some population data over a range of years. Normally, this data can be obtained from sources like the United States Census Bureau or other datasets available online.
    
    Since I don't have internet access to download the latest data directly, you can provide the data if you have it. The data should ideally consist of two columns: one for the years and one for the corresponding US population for each year.
    
    If you don't have the data, I can demonstrate how to generate the line chart with some dummy data to illustrate the process. Would you like to provide the data or should I use dummy data for the demonstration?
    
    
    --------------------------------------------------------------------------------
    [33muser_proxy[0m (to Coder Assistant):
    
    
    
    --------------------------------------------------------------------------------
    [33mCoder Assistant[0m (to user_proxy):
    
    It seems there was no response regarding the data, so let's proceed with some dummy data to demonstrate the process. I'll create a Python script that will generate a line chart showing the hypothetical population trend in the US from the year 1900 to 2000. I'll assume a simple linear growth in population for the sake of this example.
    
    Let's begin by generating the dummy data and plotting the line chart.
    
    
    Recieved file id=file-sAG7r763XR9jiuKYiQeoHRFU
    
    Here is a line chart showing the hypothetical population trend of the US from the year 1900 to 2000. The data is dummy and assumes linear growth in the population.
    
    If you have actual data or would like to see a different representation, please let me know. Otherwise, if everything looks good with this example chart, let me know if there is anything else I can help with. 
    
    TERMINATE
    
    
    --------------------------------------------------------------------------------


Now we have the file id. We can download and display it.


```python
from PIL import Image
import io
from IPython.display import display

api_response = gpt_assistant.openai_client.files.with_raw_response.retrieve_content("file-sAG7r763XR9jiuKYiQeoHRFU")

if api_response.status_code == 200:
    content = api_response.content
    image_data_bytes = io.BytesIO(content)
    image = Image.open(image_data_bytes)
    display(image)
```


    
![png](output_9_0.png)
    



```python

```
