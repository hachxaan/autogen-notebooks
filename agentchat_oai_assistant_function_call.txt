## Chat with OpenAI Assistant using function call in AutoGen: OSS Insights for Advanced GitHub Data Analysis

This Jupyter Notebook demonstrates how to leverage OSS Insight (Open Source Software Insight) for advanced GitHub data analysis by defining `Function calls` in AutoGen for the OpenAI Assistant. 

The notebook is structured into four main sections:

1. Function Schema and Implementation
2. Defining an OpenAI Assistant Agent in AutoGen
3. Fetching GitHub Insight Data using Function Call

### Requirements

AutoGen requires `Python>=3.8`. To run this notebook example, please install:
```bash
pip install pyautogen
```


```python
%%capture --no-stderr
# %pip install "pyautogen~=0.2.0b5
```

### Function Schema and Implementation

This section provides the function schema definition and their implementation details. These functions are tailored to fetch and process data from GitHub, utilizing OSS Insight's capabilities.


```python
import logging
import os
import requests

logger = logging.getLogger(__name__)
logger.setLevel(logging.WARNING)

ossinsight_api_schema = {
  "name": "ossinsight_data_api",
  "parameters": {
    "type": "object",
    "properties": {
      "question": {
        "type": "string",
        "description": (
            "Enter your GitHub data question in the form of a clear and specific question to ensure the returned data is accurate and valuable. "
            "For optimal results, specify the desired format for the data table in your request."
        ),
      }
    },
    "required": [
      "question"
    ]
  },
  "description": "This is an API endpoint allowing users (analysts) to input question about GitHub in text format to retrieve the realted and structured data."
}

def get_ossinsight(question):
    """
    Retrieve the top 10 developers with the most followers on GitHub.
    """
    url = "https://api.ossinsight.io/explorer/answer"
    headers = {"Content-Type": "application/json"}
    data = {
        "question": question,
        "ignoreCache": True
    }

    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 200:
        answer = response.json()
    else:
        return f"Request to {url} failed with status code: {response.status_code}"

    report_components = []
    report_components.append(f"Question: {answer['question']['title']}")
    if answer['query']['sql']  != "":
        report_components.append(f"querySQL: {answer['query']['sql']}")

    if answer.get('result', None) is None or len(answer['result']['rows']) == 0:
        result = "Result: N/A"
    else:
        result = "Result:\n  " + "\n  ".join([str(row) for row in answer['result']['rows']])
    report_components.append(result)

    if  answer.get('error', None) is not None:
        report_components.append(f"Error: {answer['error']}")
    return "\n\n".join(report_components)
```

### Defining an OpenAI Assistant Agent in AutoGen

Here, we explore how to define an OpenAI Assistant Agent within the AutoGen. This includes setting up the agent to make use of the previously defined function calls for data retrieval and analysis.


```python
from autogen import config_list_from_json
from autogen.agentchat.contrib.gpt_assistant_agent import GPTAssistantAgent
from autogen import UserProxyAgent

assistant_id = os.environ.get("ASSISTANT_ID", None)
config_list = config_list_from_json("OAI_CONFIG_LIST")
llm_config = {
    "config_list": config_list,
    "assistant_id": assistant_id,
     "tools": [
        {
            "type": "function",
            "function": ossinsight_api_schema,
        }
    ]
}

oss_analyst = GPTAssistantAgent(
    name="OSS Analyst",                            
    instructions=(
        "Hello, Open Source Project Analyst. You'll conduct comprehensive evaluations of open source projects or organizations on the GitHub platform, "
        "analyzing project trajectories, contributor engagements, open source trends, and other vital parameters. "
        "Please carefully read the context of the conversation to identify the current analysis question or problem that needs addressing."
    ),
    llm_config=llm_config,
)
oss_analyst.register_function(
    function_map={
        "ossinsight_data_api": get_ossinsight,
    }
)
```

### Fetching GitHub Insight Data using Function Call

This part of the notebook demonstrates the practical application of the defined functions and the OpenAI Assistant Agent in fetching and interpreting GitHub Insight data.


```python
user_proxy = UserProxyAgent(name="user_proxy",
    code_execution_config={
        "work_dir": "coding"
    },
    is_termination_msg=lambda msg: "TERMINATE" in msg["content"],
    human_input_mode="NEVER",
    max_consecutive_auto_reply=1)

user_proxy.initiate_chat(oss_analyst, message="Top 10 developers with the most followers")
```

    [33muser_proxy[0m (to OSS Analyst):
    
    Top 10 developers with the most followers
    
    --------------------------------------------------------------------------------
    [35m
    >>>>>>>> EXECUTING FUNCTION ossinsight_data_api...[0m
    [33mOSS Analyst[0m (to user_proxy):
    
    The top 10 developers on GitHub with the most followers are:
    
    1. Linus Torvalds (`torvalds`) with 166,730 followers.
    2. Evan You (`yyx990803`) with 86,239 followers.
    3. Dan Abramov (`gaearon`) with 77,611 followers.
    4. Ruan YiFeng (`ruanyf`) with 72,668 followers.
    5. Jake Wharton (`JakeWharton`) with 65,415 followers.
    6. Peng Zhihui (`peng-zhihui`) with 60,972 followers.
    7. Brad Traversy (`bradtraversy`) with 58,172 followers.
    8. Gustavo Guanabara (`gustavoguanabara`) with 52,143 followers.
    9. Sindre Sorhus (`sindresorhus`) with 51,542 followers.
    10. TJ Holowaychuk (`tj`) with 49,621 followers.
    
    
    --------------------------------------------------------------------------------
    [33muser_proxy[0m (to OSS Analyst):
    
    
    
    --------------------------------------------------------------------------------
    [33mOSS Analyst[0m (to user_proxy):
    
    It seems like there is no question or further instructions provided in your last response. How may I assist you further with open source project analysis or any other inquiries you might have?
    
    
    --------------------------------------------------------------------------------

